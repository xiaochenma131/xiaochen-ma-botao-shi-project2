{"ast":null,"code":"const shipLengths = [5, 4, 3, 3, 2];\nconst defaultState = [['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'], ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'], ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'], ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'], ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'], ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'], ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'], ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'], ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'], ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty']];\n\nfunction randomizeBoard(emptyArray, shipsArray) {\n  const randomizedBoard = emptyArray.map(inner => inner.slice());\n\n  for (let shipLength of shipsArray) {\n    let row = Math.floor(Math.random() * 10);\n    let col = Math.floor(Math.random() * 10);\n    const BOUNDARY = 10;\n    let boundaryFlag = 1;\n\n    while (boundaryFlag === 1) {\n      boundaryFlag = 0;\n\n      for (let i = col; i < col + shipLength; i++) {\n        if (i === BOUNDARY || randomizedBoard[row][i] === 'ship') {\n          boundaryFlag = 1;\n          break;\n        }\n      }\n\n      if (boundaryFlag === 0) {\n        break;\n      }\n\n      row = Math.floor(Math.random() * 10);\n      col = Math.floor(Math.random() * 10);\n    }\n\n    randomizedBoard[row].fill('ship', col, col + shipLength);\n  }\n\n  return randomizedBoard;\n}\n\nexport default function myBoardReducer(state = randomizeBoard(defaultState, shipLengths), action) {\n  if (action.type === 'myBoardClick') {\n    const value = state[action.x][action.y];\n\n    if (value === 'empty') {\n      state[action.x][action.y] = 'miss';\n    } else if (value === 'ship') {\n      state[action.x][action.y] = 'hit';\n    }\n\n    return [...state];\n  }\n\n  if (action.type === 'reset') {\n    state = randomizeBoard(defaultState, shipLengths);\n    return [...state];\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/Users/xiaochenma/Desktop/xiaochen-ma-botao-shi-project2/src/reducers/myBoardReducer.js"],"names":["shipLengths","defaultState","randomizeBoard","emptyArray","shipsArray","randomizedBoard","map","inner","slice","shipLength","row","Math","floor","random","col","BOUNDARY","boundaryFlag","i","fill","myBoardReducer","state","action","type","value","x","y"],"mappings":"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","sourcesContent":["const shipLengths = [5, 4, 3, 3, 2];\n\nconst defaultState = [\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\n];\n\nfunction randomizeBoard(emptyArray, shipsArray) {\n    const randomizedBoard = emptyArray.map(inner => inner.slice());\n\n    for (let shipLength of shipsArray) {\n        let row = Math.floor(Math.random() * 10);\n        let col = Math.floor(Math.random() * 10);\n        const BOUNDARY = 10;\n        let boundaryFlag = 1;\n        while (boundaryFlag === 1) {\n            boundaryFlag = 0;\n            for (let i = col; i < col + shipLength; i++) {\n                if (i === BOUNDARY || randomizedBoard[row][i] === 'ship') {\n                    boundaryFlag = 1;\n                    break;\n                }\n            }\n            if (boundaryFlag === 0) {\n                break;\n            }\n            row = Math.floor(Math.random() * 10);\n            col = Math.floor(Math.random() * 10);\n        }\n\n        randomizedBoard[row].fill('ship', col, col + shipLength);\n    }\n    return randomizedBoard;\n}\n\nexport default function myBoardReducer(\n    state = randomizeBoard(defaultState, shipLengths), action\n) {\n    if (action.type === 'myBoardClick') {\n        const value = state[action.x][action.y];\n        if (value === 'empty') {\n            state[action.x][action.y] = 'miss';\n        } else if (value === 'ship') {\n            state[action.x][action.y] = 'hit';\n        }\n        return [...state];\n    }\n    if (action.type === 'reset') {\n        state = randomizeBoard(defaultState, shipLengths);\n        return [...state];\n    }\n    return state;\n}"]},"metadata":{},"sourceType":"module"}